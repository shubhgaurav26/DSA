Problem Statement
Given an unsorted integer array A, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

Example 1:
Input:

A = [1, 0, 2]

Output:

3

Explanation:

The numbers in the range [1,2] are all in the array.

Example 2:
Input:

nums = [3,4,-1,1]

Output:

2

Explanation:

1 is in the array but 2 is missing. And we need to return the positive integer only which cannot be 0.

Constraints:
1 <= |A| <= 105

1 <= Ai <= 106






CODE :

class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {
                int temp = nums[nums[i] - 1];
                nums[nums[i] - 1] = nums[i];
                nums[i] = temp;
            }
        }

        for (int i = 0; i < n; i++) {
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }

        return n + 1;
    }
}


