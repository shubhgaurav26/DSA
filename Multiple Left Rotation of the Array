Problem Statement
Given an array of integers A and multiple values in B, which represents the number of times array A needs to be left rotated.

Find the rotated array for each value and return the result in a matrix where the ith row represents the rotated array for the ith value in B.

After every rotation, array A becomes equal to the original.

Example 1:
Input:

A = [1, 2, 3, 4, 5]

B = [3, 2]

Output:

[[4, 5, 1, 2, 3], [3, 4, 5, 1, 2]]

Explanation:

B[0] = 2 which requires 2 times left rotations

1: [2, 3, 4, 5, 1]

2: [3, 4, 5, 1, 2]

B[1] = 3 which requires 3 times left rotation

1: [2, 3, 4, 5, 1]

2: [3, 4, 5, 1, 2]

2: [4, 5, 1, 2, 3]

Example 2:
Input:

4 1

5 17 100 11

1

Output:

[[17, 100, 11, 5]]

 

Constraints:
1 <= N <= 2 * 103

1 <= M <= 2 * 103

-109 <= A[i] <= 109

0 <= B[j] <= 2000




CODE :


import java.util.*;

public class LeftRotation {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) A[i] = sc.nextInt();
        int[] B = new int[m];
        for (int i = 0; i < m; i++) B[i] = sc.nextInt();

        int[][] result = new int[m][n];
        for (int i = 0; i < m; i++) {
            int rotations = B[i] % n;
            for (int j = 0; j < n; j++) {
                result[i][j] = A[(j + rotations) % n];
            }
        }

        for (int[] row : result) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }
}


