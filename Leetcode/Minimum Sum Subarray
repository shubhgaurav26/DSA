Problem Statement
Given an array of positive integers A and a positive integer K, return the minimal length of a Subarray whose sum is greater than or equal to the target. If there is no such subarray, return 0 instead.

Example 1:
Input: 
target = 7
nums = [2,3,1,2,4,3]
Output: 
2
Explanation: 
The subarray [4,3] has the minimal length under the problem constraint.
Example 2:
Input: 
target = 4
nums = [1,4,4]
Output: 
1
Constraints:
1 <= K <= 109

1 <= A.length <= 105

1 <= A[i] <= 104


CODE :

public class MinimalSubarray {
    public static int minSubArrayLen(int target, int[] nums) {
        int n = nums.length;
        int minLength = Integer.MAX_VALUE;
        int left = 0, sum = 0;

        for (int right = 0; right < n; right++) {
            sum += nums[right];

            while (sum >= target) {
                minLength = Math.min(minLength, right - left + 1);
                sum -= nums[left];
                left++;
            }
        }

        return minLength == Integer.MAX_VALUE ? 0 : minLength;
    }

    public static void main(String[] args) {
        int target1 = 7;
        int[] nums1 = {2, 3, 1, 2, 4, 3};
        System.out.println(minSubArrayLen(target1, nums1));

        int target2 = 4;
        int[] nums2 = {1, 4, 4};
        System.out.println(minSubArrayLen(target2, nums2));
    }
}


