Problem Statement
Reverse the order of all nodes at even places in a linked list A.

Example 1:
Input: 
1 -> 2 -> 3 -> 4 -> 5

Output: 
1 -> 4 -> 3 -> 2 -> 5

Example 2:
Input: 
1 -> 2 -> 3 -> 4 

Output: 
1 -> 4 -> 3 -> 2 

Constraints:
1 <= Size of linked list <= 105



CODE : 


class ListNode {
    int value;
    ListNode next;
    ListNode(int value) {
        this.value = value;
        this.next = null;
    }
}

public class ReverseEvenNodes {
    public static ListNode reverseEvenNodes(ListNode head) {
        if (head == null || head.next == null) return head;
        ListNode current = head;
        List<Integer> evenNodes = new ArrayList<>();
        int index = 1;
        while (current != null) {
            if (index % 2 == 0) evenNodes.add(current.value);
            current = current.next;
            index++;
        }
        Collections.reverse(evenNodes);
        current = head;
        index = 1;
        int evenIndex = 0;
        while (current != null) {
            if (index % 2 == 0) current.value = evenNodes.get(evenIndex++);
            current = current.next;
            index++;
        }
        return head;
    }

    public static ListNode createLinkedList(int[] values) {
        if (values.length == 0) return null;
        ListNode head = new ListNode(values[0]);
        ListNode current = head;
        for (int i = 1; i < values.length; i++) {
            current.next = new ListNode(values[i]);
            current = current.next;
        }
        return head;
    }

    public static void printLinkedList(ListNode head) {
        while (head != null) {
            System.out.print(head.value);
            if (head.next != null) System.out.print(" -> ");
            head = head.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        ListNode head = createLinkedList(new int[]{1, 2, 3, 4, 5});
        printLinkedList(head);
        head = reverseEvenNodes(head);
        printLinkedList(head);
    }
}


