Problem Statement
Given an array arr of n positive elements. Return the pairs in sorted order (in case of the same first element sort on the basis of the second element) whose sum already exists in the given array.

You should form pairs such that the first element of the pair has a lower index in the array arr than the second element.

Example 1:
Sample Input

Arr = [10, 4, 8, 13, 5]

 

Sample Output 

[[8, 5]]

 
Explanation : (Sum of 8 and 5 i.e 13 is present in the array)

Note: 8 comes before 5 in output because 8 is before 5 in input.

Example 2:
Input:

arr[] = {2, 8, 7, 1, 5}

Output:

[[2, 5], [7, 1]]

Explanation : (Sum of 2 and 5 i.e 7 and 7 and 1 i.e., 8 are present in the array)

Note: 2 comes before 5 in output because 2 is before 5 in input.

Again, 7 comes before 1 in output because 7 is before 1 in input.

Constraints:
1 <= n <= 103

1<= arr[i] <=104


CODE :

import java.util.*;

public class ArraySum {
    public static int sumOfMaxAndMin(int[] nums) {
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;

        for (int num : nums) {
            if (num > max) max = num;
            if (num < min) min = num;
        }

        return max + min;
    }

    public static void main(String[] args) {
        int[] nums1 = {-10, 2, 4, 5, 6};
        int[] nums2 = {8, -2, 1};

        System.out.println(sumOfMaxAndMin(nums1));
        System.out.println(sumOfMaxAndMin(nums2));
    }
}


