Problem Statement
Given an array A of non-negative integers of size N. Find the minimum subarray Al, Al+1 ,..., Ar such that if we sort(in ascending order) that sub-array, then the whole array should get sorted. If A is already sorted, output -1.

Example 1:
Input: 

A = [1, 3, 2, 4, 5]

Output:

[1, 2]

Explanation:

If we sort the array between the indices 1 to 2, the whole array will be sorted.

Example 2:
Input:

A = [1, 2, 3, 4, 5]

Output:

[-1]

Constraints:
1 <= N <= 1000000

1 <= A[i] <= 1000000





CODE :


import java.util.*;

public class Solution {
    public static int[] findSubarray(int[] A) {
        int n = A.length;
        int left = -1, right = -1;
        
        for (int i = 0; i < n - 1; i++) {
            if (A[i] > A[i + 1]) {
                left = i;
                break;
            }
        }
        
        if (left == -1) {
            return new int[] {-1};
        }
        
        for (int i = n - 1; i > 0; i--) {
            if (A[i] < A[i - 1]) {
                right = i;
                break;
            }
        }
        
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for (int i = left; i <= right; i++) {
            min = Math.min(min, A[i]);
            max = Math.max(max, A[i]);
        }
        
        while (left > 0 && A[left - 1] > min) {
            left--;
        }
        
        while (right < n - 1 && A[right + 1] < max) {
            right++;
        }
        
        return Arrays.copyOfRange(A, left, right + 1);
    }

    public static void main(String[] args) {
        int[] A = {1, 3, 2, 4, 5};
        int[] result = findSubarray(A);
        System.out.println(Arrays.toString(result));
    }
}

