Problem Statement
Given an array of distinct integers, find all pairs of elements where the difference between the two elements is the smallest among all pairs in the array. Return these pairs in ascending order, where each pair is represented by [a, b], such that a, b are elements from the array and a < b. The difference between a and b should be the smallest possible.

Example 1:
Input:

arr = [12, 9, 8, 2, 11]

Output:

[[8, 9], [11, 12]]

Example 2:
Input:

arr = [22, 7, 1, 3, 11, 20, 19]

Output:

[[19, 20]]

Constraints:
2 <= |arr| <= 100000

-100000 <= arr[i] <= 100000


CODE :

import java.util.*;

public class SmallestDifferencePairs {
    public static List<List<Integer>> findPairsWithSmallestDifference(int[] arr) {
        Arrays.sort(arr);
        List<List<Integer>> result = new ArrayList<>();
        int minDifference = Integer.MAX_VALUE;

        for (int i = 1; i < arr.length; i++) {
            int diff = arr[i] - arr[i - 1];
            if (diff < minDifference) {
                minDifference = diff;
                result.clear();
            }
            if (diff == minDifference) {
                result.add(Arrays.asList(arr[i - 1], arr[i]));
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[] arr1 = {12, 9, 8, 2, 11};
        System.out.println(findPairsWithSmallestDifference(arr1));

        int[] arr2 = {22, 7, 1, 3, 11, 20, 19};
        System.out.println(findPairsWithSmallestDifference(arr2));
    }
}


