Problem Statement
Return the indices of the two numbers so that they add up to target given an array of integers nums and an integer target.

You can make an assumption that every input has exactly one solution, and you may avoid using the same element more than once.

Note: Return the answer in sorted order.

Example 1:
Input: 
nums = [1,2,3,4,5]
target = 8
Output: 
[2,4]
Explanation: 
Because nums[2] + nums[4] == 8, we return [2, 4].
Example 2:
Input: 
nums = [1,2,3,4,5]
target = 3
Output:
[0,1]

Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.



CODE :


import java.util.*;

public class TwoSum {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) nums[i] = sc.nextInt();
        int target = sc.nextInt();

        int[] result = findTwoSum(nums, target);
        System.out.println(Arrays.toString(result));
    }

    public static int[] findTwoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                int[] indices = new int[]{map.get(complement), i};
                Arrays.sort(indices);
                return indices;
            }
            map.put(nums[i], i);
        }
        return new int[]{};
    }
}

