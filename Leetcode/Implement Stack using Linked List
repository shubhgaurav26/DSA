Problem Statement
You have a linked list and you have to implement the functionalities push and pop of stack using this given linked list. Your task is to use the class as shown in the code editor and complete the functions push() and pop() to implement a stack. 

 

You are required to complete two methods push() and pop(). The push() method takes one argument, an integer 'x' to be pushed into the stack and pop() which returns an integer present at the top and popped out from the stack. If the stack is empty then return -1 from the pop() method.

 

 

Example 1:
Input:

5
push(2)
push(3)
pop()
push(4) 
pop()


Output:

[2]


Explanation: 

There are a total of 5 operations
push(2):    the stack will be {2}
push(3):    the stack will be {2 3}
pop():      poped element will be 3, the stack will be {2}
push(4):    the stack will be {2 4}
pop():      poped element will be 4

Final Stack: [2]

Example 2:
Input: 
4
pop()
push(4)
push(5)
pop()


Output:

[4]

Constraints:
1 <= Number of Operations <= 100
1 <= x <= 100



CODE :

class StackUsingLinkedList {
    class Node {
        int data;
        Node next;
        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node top;

    public StackUsingLinkedList() {
        this.top = null;
    }

    public void push(int x) {
        Node newNode = new Node(x);
        newNode.next = top;
        top = newNode;
    }

    public int pop() {
        if (top == null) {
            return -1;
        }
        int value = top.data;
        top = top.next;
        return value;
    }

    public static void main(String[] args) {
        StackUsingLinkedList stack = new StackUsingLinkedList();
        stack.push(2);
        stack.push(3);
        System.out.println(stack.pop());
        stack.push(4);
        System.out.println(stack.pop());
    }
}





