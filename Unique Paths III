Problem Statement
You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

Example 1:
Input: 
grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 
2
Explanation: 
We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:
Input: 
grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 
4
Constraints:
1 <= n*m <= 15

-1 <= grid[i][j] <= 2






CODE :

class Solution {
    public int uniquePathsIII(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int empty = 0;
        int startX = 0, startY = 0;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    startX = i;
                    startY = j;
                } else if (grid[i][j] == 0) {
                    empty++;
                }
            }
        }

        return dfs(grid, startX, startY, empty + 1);
    }

    private int dfs(int[][] grid, int x, int y, int empty) {
        if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] == -1) {
            return 0;
        }

        if (grid[x][y] == 2) {
            return empty == 0 ? 1 : 0;
        }

        grid[x][y] = -1;
        int paths = dfs(grid, x + 1, y, empty - 1)
                  + dfs(grid, x - 1, y, empty - 1)
                  + dfs(grid, x, y + 1, empty - 1)
                  + dfs(grid, x, y - 1, empty - 1);
        grid[x][y] = 0;

        return paths;
    }
}


