import java.util.*;

class Graph {
    private int V;
    private List<int[]> edges;

    public Graph(int vertices) {
        V = vertices;
        edges = new ArrayList<>();
    }

    public void addEdge(int u, int v) {
        edges.add(new int[]{u, v});
    }

    private int findParent(int[] parent, int i) {
        if (parent[i] == -1) return i;
        return findParent(parent, parent[i]);
    }

    private void union(int[] parent, int x, int y) {
        int xRoot = findParent(parent, x);
        int yRoot = findParent(parent, y);
        parent[xRoot] = yRoot;
    }

    public boolean isCyclic() {
        int[] parent = new int[V];
        Arrays.fill(parent, -1);

        for (int[] edge : edges) {
            int x = findParent(parent, edge[0]);
            int y = findParent(parent, edge[1]);

            if (x == y) return true;
            union(parent, x, y);
        }
        return false;
    }

    public static void main(String[] args) {
        Graph g = new Graph(3);
        g.addEdge(0, 1);
        g.addEdge(1, 2);
        g.addEdge(2, 0);

        System.out.println(g.isCyclic() ? "Cycle Detected" : "No Cycle");
    }
}
